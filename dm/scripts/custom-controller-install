#!/bin/sh

# Download source code
mkdir -p /apps/infra && cd "$_" || exit 1
git clone https://github.com/pottava/pbs-on-googlecloud.git
cd pbs-on-googlecloud || exit 1

# Configure SSH for root user
ssh-keygen -t rsa -b 2048 -N "" -f /root/.ssh/id_rsa -q -C root
cat /root/.ssh/id_rsa.pub > /root/.ssh/authorized_keys
chmod 600 /root/.ssh/id_rsa
chmod 600 /root/.ssh/authorized_keys

cat << EOF > /root/.ssh/config
Host *
StrictHostKeyChecking no
UserKnownHostsFile /dev/null
EOF
chmod 600 /root/.ssh/config
chmod 700 /root/.ssh

# Make hostfiles
ansible_hosts="inventories/hpc/hosts"
mpi_hostfile="/apps/hostfile"

echo '' > ssh_config
printf '[login]\nlocalhost ansible_connection=local\n\n[head]\n' > "${ansible_hosts}"
rm -rf "${mpi_hostfile}" && touch "$_"

for node in $( gcloud compute instances list \
    --filter "name~'hpc-controller' AND STATUS:RUNNING" \
    --format="value(INTERNAL_IP)" ); do
  echo "hpc-controller" >> "${ansible_hosts}"
  cat << EOT >> ssh_config
Host hpc-controller
  User root
  HostName ${node}
  IdentityFile /root/.ssh/id_rsa
  StrictHostKeyChecking no
  UserKnownHostsFile /dev/null
EOT
done

printf '\n[compute]\n' >> "${ansible_hosts}"
for node in $( gcloud compute instances list \
    --filter "name~'hpc-compute.*' AND STATUS:RUNNING" \
    --format="value(INTERNAL_IP)" ); do
  worker_hostname=$( ssh -i /root/.ssh/id_rsa "${node}" hostname 2>/dev/null )
  echo "${worker_hostname}" >> "${ansible_hosts}"
  echo "${worker_hostname}" >> "${mpi_hostfile}"
  cat << EOT >> ssh_config

Host ${worker_hostname}
  User root
  HostName ${node}
  IdentityFile /root/.ssh/id_rsa
  StrictHostKeyChecking no
  UserKnownHostsFile /dev/null
EOT
done
